#!/usr/bin/python
"""
Author: Angel Leon (gubatron@openbazaar.org)
Created: August 27th, 2014

A simple debian binary package (.deb) builder script.

In the future I'll make another script that uses the appropiate debian
developer toolkit to create a formal debian source package.
"""
import os
import re

OB_PROJECT_DIR=os.path.realpath('../..')
USR_LOCAL_OB_DIR='/usr/local/openbazaar'
BIN_DIR='/usr/bin'
SHARE_DIR='/usr/share'
APP_DIR=SHARE_DIR + '/applications'
HICOLOR_DIR=SHARE_DIR + '/icons/hicolor'
DOC_DIR=SHARE_DIR + '/doc/openbazaar'
MAN_DIR=SHARE_DIR + '/man/man1'

def assert_current_dir_is(dirname):
    assert(os.path.basename(os.path.realpath(os.path.curdir)) == dirname)

def read_version_from_changelog():
    assert_current_dir_is('ubuntu')
    f = open('../../changelog','r')
    first_line = f.readline()
    f.close()

    m = re.search('openbazaar.*?([0-9]+\.[0-9]+\.[0-9]+).*', first_line)
    return m.group(1)

def rm_rf(d):
    #removes folders recursively
    for path in (os.path.join(d,f) for f in os.listdir(d)):
        if os.path.isdir(path):
            rm_rf(path)
        else:
            os.unlink(path)
    os.rmdir(d)

def delete_previous_package(packageName):
    assert_current_dir_is('ubuntu')
    if os.path.exists(packageName):
        os.unlink(packageName)

def clean_debian_folder():
    '''clean everything but the files we'll take to build the installer'''
    assert_current_dir_is('output')

    contents = os.listdir('.')
    DONT_DELETE = ('OUTPUT')

    for item in contents:
        if item in DONT_DELETE:
            print '(keeping %s)' % item
            continue

        if os.path.isdir(item):
            rm_rf(item)
            print '(deleted',item,'folder)'
        elif os.path.isfile(item):
            os.unlink(item)
            print '(deleted',item,'file)'

def cleanup():
    assert_current_dir_is('ubuntu')
    os.system('rm -fr output')
    os.system('rm -f *.deb')
    os.system('rm -f *.rpm')

def create_folder_structure():
    assert_current_dir_is('ubuntu')
    os.makedirs('./output')
    os.chdir('output')
    assert_current_dir_is('output')

    os.makedirs('.' + USR_LOCAL_OB_DIR)
    os.makedirs('.' + USR_LOCAL_OB_DIR + '/db')
    os.makedirs('.' + USR_LOCAL_OB_DIR + '/msig')
    os.makedirs('.' + USR_LOCAL_OB_DIR + '/html/backups')
    os.makedirs('.' + USR_LOCAL_OB_DIR + '/logs')
    os.makedirs('.' + SHARE_DIR)
    os.makedirs('.' + HICOLOR_DIR + '/16x16/apps')
    os.makedirs('.' + HICOLOR_DIR + '/32x32/apps')
    os.makedirs('.' + HICOLOR_DIR + '/48x48/apps')
    os.makedirs('.' + HICOLOR_DIR + '/64x64/apps')
    os.makedirs('.' + HICOLOR_DIR + '/128x128/apps')  
    os.makedirs('.' + APP_DIR)
    os.makedirs('.' + BIN_DIR)
    os.makedirs('.' + DOC_DIR)
    os.makedirs('.' + MAN_DIR)

    os.chdir('..')
    assert_current_dir_is('ubuntu')

def copy_files():
    assert_current_dir_is('ubuntu')
    os.chdir('output')
    assert_current_dir_is('output')

    #copy the launcher scripts and icon
    os.system('cp ' + OB_PROJECT_DIR + '/run.sh .' +  USR_LOCAL_OB_DIR)
    os.system('cp ' + OB_PROJECT_DIR + '/stop.sh .' + USR_LOCAL_OB_DIR)
    os.system('cp ' + OB_PROJECT_DIR + '/requirements.txt .' + USR_LOCAL_OB_DIR)
    os.system('cp ' + OB_PROJECT_DIR + '/configure.sh .' +     USR_LOCAL_OB_DIR)
    
    #copy man, gzip it, put it in the man dir
    os.system('cp ' + OB_PROJECT_DIR + '/docs/openbazaar.1 .')
    os.system('tar cvfz openbazaar.1.gz openbazaar.1')
    os.unlink('openbazaar.1')
    os.system('mv openbazaar.1.gz .' + MAN_DIR)
    
    #take care of the icons
    os.system('cp ../icons/16x16.png .'+ HICOLOR_DIR +'/16x16/apps/openbazaar.png')
    os.system('cp ../icons/32x32.png .'+ HICOLOR_DIR +'/32x32/apps/openbazaar.png')
    os.system('cp ../icons/48x48.png .'+ HICOLOR_DIR +'/48x48/apps/openbazaar.png')
    os.system('cp ../icons/64x64.png .'+ HICOLOR_DIR +'/64x64/apps/openbazaar.png')
    os.system('cp ../icons/128x128.png .'+ HICOLOR_DIR +'/128x128/apps/openbazaar.png')
    
    #copy License and changelog to /usr/share/doc/openbazaar
    os.system('cp ' + OB_PROJECT_DIR + '/changelog .'+DOC_DIR)
    os.system('cp ' + OB_PROJECT_DIR + '/LICENSE.txt .'+DOC_DIR)
    
    #make sure launcher script is executable
    os.system('cp ../openbazaar .' + BIN_DIR)
    os.system('chmod +x .'+BIN_DIR+'/openbazaar')

    #copy DEBIAN files
    os.system('cp -R ../DEBIAN .')
    
    #copy the desktop launcher
    os.system('cp ../openbazaar.desktop .'+APP_DIR)
    os.system('chmod +x .'+APP_DIR+'/openbazaar.desktop')
    
    #copy server, web files and third party dependency sources we've been forced to include
    #in our project because their pip scripts fail.
    os.system('cp -R ' + OB_PROJECT_DIR + '/node .' + USR_LOCAL_OB_DIR + '/')
    os.system('cp -R ' + OB_PROJECT_DIR + '/html .' + USR_LOCAL_OB_DIR + '/')
    os.system('cp -R ' + OB_PROJECT_DIR + '/pysqlcipher .' + USR_LOCAL_OB_DIR + '/')
    
    #make sure backup folder is empty
    os.system('rm -f .' + USR_LOCAL_OB_DIR + '/html/backups/*')

    os.chdir('..')
    assert_current_dir_is('ubuntu')

def build_deb_package(packageName):
    '''builds the .deb'''
    assert_current_dir_is('ubuntu')
    os.system('fakeroot dpkg -D1 -b output ' + packageName)


def build_rpm_package(packageName):
    '''creates an .rpm out of the .deb file'''
    assert_current_dir_is('ubuntu')
    os.system('fakeroot alien --to-rpm --scripts ' + packageName)

if __name__ == '__main__':
    dotDebName = 'openbazaar-'+read_version_from_changelog()+'.amd64.deb'

    cleanup()
    delete_previous_package(dotDebName)

    create_folder_structure()
    copy_files()

    build_deb_package(dotDebName)
    build_rpm_package(dotDebName)
